module InvocationTests

open System.IO
open NUnit.Framework
open FsUnit
open GraphVizWrapper

[<TestFixture>]
type InvocationTests() =

   let createFile content =
      let name = System.IO.Path.GetTempFileName()
      File.WriteAllText(name, content)
      name

   // TODO Temp file cleanup
   let nonExistentFilePath = "idontexist"
   let emptyFilePath  = createFile ""
   let invalidContentFilePath = createFile "invalid"
   let validEmptyGraphFilePath = createFile "digraph {}"
   let validOneNodeGraphFilePath = createFile "digraph { a; }"

   [<TestFixtureTearDown>]
   member __.Cleanup() =
      [ emptyFilePath; invalidContentFilePath; validEmptyGraphFilePath; validOneNodeGraphFilePath ]
      |> Seq.iter (fun path -> try File.Delete path with | _ -> ())

   [<Test>]
   member __.``Invoking the dot command with an empty input file causes an 'Empty input file' error``() =
      let expected = CommandResult.Failure "Empty input file"
      let actual = GraphVizWrapper.Invocation.Call(Algo.Dot, emptyFilePath)
      actual |> should equal expected

   [<Test>]
   member __.``Invoking the dot command with a missing input file causes a 'Missing input file' error``() =
      let expected = CommandResult.Failure "Missing input file"
      let actual = GraphVizWrapper.Invocation.Call(Algo.Dot, nonExistentFilePath)
      actual |> should equal expected

   [<Test>]
   member __.``Invoking the dot command with an input file with invalid input causes a 'Invalid input file content' error``() =
      let expected = "Invalid input file content: "
      let actual = 
         match GraphVizWrapper.Invocation.Call(Algo.Dot, invalidContentFilePath) with
         | Success content -> content
         | Failure message -> message
      actual |> should startWith expected

   [<Test>]
   member __.``Invoking the dot for svg command with a file containing a valid but empty graph generates an SVG file representing a blank page``() =
      let expected = """<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="8pt" height="8pt"
 viewBox="0.00 0.00 8.00 8.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 4)">
<title>%3</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-4 4,-4 4,4 -4,4"/>
</g>
</svg>
"""

      let actual = 
         match GraphVizWrapper.Invocation.Call(Algo.Dot, validEmptyGraphFilePath) with
         | Success content -> content
         | Failure _ -> ""
      actual |> should equal expected

   [<Test>]
   member __.``Invoking the dot for svg command with a file containing a single node generates an SVG file representing that node``() =
      let expected = """<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="62pt" height="44pt"
 viewBox="0.00 0.00 62.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
<title>%3</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-40 58,-40 58,4 -4,4"/>
<!-- a -->
<g id="node1" class="node"><title>a</title>
<ellipse fill="none" stroke="black" cx="27" cy="-18" rx="27" ry="18"/>
<text text-anchor="middle" x="27" y="-14.3" font-family="Times New Roman,serif" font-size="14.00">a</text>
</g>
</g>
</svg>
"""

      let actual = 
         match GraphVizWrapper.Invocation.Call(Algo.Dot, validOneNodeGraphFilePath) with
         | Success content -> content
         | Failure message -> message
      actual |> should equal expected


